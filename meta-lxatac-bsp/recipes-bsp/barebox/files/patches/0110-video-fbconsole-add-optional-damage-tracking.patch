From: Philipp Zabel <p.zabel@pengutronix.de>
Date: Fri, 31 Mar 2023 12:33:57 +0200
Subject: [PATCH] video: fbconsole: add optional damage tracking

Annotate framebuffer updates with damage rectangles so drivers may
implement partial updates for displays with an integrated framebuffer.

Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
---
 drivers/video/fbconsole.c | 31 +++++++++++++++++++++++++++++++
 1 file changed, 31 insertions(+)

diff --git a/drivers/video/fbconsole.c b/drivers/video/fbconsole.c
index 070378aa2352..5c36d1e7a40b 100644
--- a/drivers/video/fbconsole.c
+++ b/drivers/video/fbconsole.c
@@ -60,9 +60,17 @@ static int fbc_tstc(struct console_device *cdev)
 static void cls(struct fbc_priv *priv)
 {
 	void *buf = gui_screen_render_buffer(priv->sc);
+	struct fb_info *fb = priv->fb;
+	struct fb_rect rect = {
+		.x1 = 0,
+		.y1 = 0,
+		.x2 = fb->xres,
+		.y2 = fb->yres,
+	};
 
 	memset(buf, 0, priv->fb->line_length * priv->fb->yres);
 	gu_screen_blit(priv->sc);
+	fb_damage(fb, &rect);
 }
 
 struct rgb {
@@ -139,6 +147,12 @@ static void drawchar(struct fbc_priv *priv, int x, int y, int c)
 static void video_invertchar(struct fbc_priv *priv, int x, int y)
 {
 	void *buf;
+	struct fb_rect rect = {
+		.x1 = x * priv->font->width,
+		.y1 = y * priv->font->height,
+		.x2 = x * priv->font->width + priv->font->width,
+		.y2 = y * priv->font->height + priv->font->height,
+	};
 
 	buf = gui_screen_render_buffer(priv->sc);
 
@@ -146,6 +160,7 @@ static void video_invertchar(struct fbc_priv *priv, int x, int y)
 			priv->font->width, priv->font->height);
 	gu_screen_blit_area(priv->sc, x * priv->font->width, y * priv->font->height,
 			priv->font->width, priv->font->height);
+	fb_damage(priv->fb, &rect);
 }
 
 static void show_cursor(struct fbc_priv *priv, int x, int y)
@@ -156,6 +171,14 @@ static void show_cursor(struct fbc_priv *priv, int x, int y)
 
 static void printchar(struct fbc_priv *priv, int c)
 {
+	struct fb_info *fb = priv->fb;
+	struct fb_rect rect = {
+		.x1 = priv->x * priv->font->width,
+		.y1 = priv->y * priv->font->height,
+		.x2 =  priv->x * priv->font->width + priv->font->width,
+		.y2 =  priv->y * priv->font->height + priv->font->height,
+	};
+
 	video_invertchar(priv, priv->x, priv->y);
 
 	switch (c) {
@@ -188,6 +211,7 @@ static void printchar(struct fbc_priv *priv, int c)
 		gu_screen_blit_area(priv->sc, priv->x * priv->font->width,
 				priv->y * priv->font->height,
 				priv->font->width, priv->font->height);
+		fb_damage(fb, &rect);
 
 		priv->x++;
 		if (priv->x > priv->cols) {
@@ -200,6 +224,12 @@ static void printchar(struct fbc_priv *priv, int c)
 		void *buf;
 		u32 line_length = priv->fb->line_length;
 		int line_height = line_length * priv->font->height;
+		struct fb_rect rect = {
+			.x1 = 0,
+			.y1 = 0,
+			.x2 = fb->xres,
+			.y2 = fb->yres,
+		};
 
 		buf = gui_screen_render_buffer(priv->sc);
 
@@ -207,6 +237,7 @@ static void printchar(struct fbc_priv *priv, int c)
 		memset(buf + line_height * priv->rows, 0, line_height);
 
 		gu_screen_blit(priv->sc);
+		fb_damage(fb, &rect);
 		priv->y = priv->rows;
 	}
 
